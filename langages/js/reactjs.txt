(
Installation : NodeJS
npm install create-react-app (à faire dans le dossier des projets)

Créer un projet :
npx create-react-app nomprojet

Dans le dossier nomprojet :
npm start
)


Vidéo :
JSX : JavaScript de base qui permet d'ajouter facilement des structures HTML.

Script de base :
Dans App.jsx :
function App(){
    return 'texte';
}

Dans main.jsx :
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

App.jsx :
const titre = "Bonjour"
const classe = "title"

function App() {
  return <>
    <h1 id="title" className={classe}>{titre}</h1>
    <input type="text"/>
    <input type="number"></input>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo minus eligendi sint libero obcaecati repellendus iure culpa alias laborum expedita fugiat ipsa neque consequuntur, deserunt asperiores, laudantium optio ex provident.</p>
  </>
}

export default App

Attention :
On n'écrit pas class="classe", mais className="classe"
Variable dans une balise : {variable}

Fragments : pour éviter des éléments parents, on peut utiliser des <Fragments>contenu</Fragments> (import {Fragment} from "react";) ou <>contenu</>
Toutes les balises doivent être automatiquemnent fermé : on ne peut pas écrire <img src="source"> mais soit <img src="source"></img>, soit <img src="source"/> (autofermante comme en HTML)

Chaînes de caractères : variable = "bonjour <b>tout le monde</b>"; -> <b></b> n'est pas considéré comme une balise, mais comme une chaîne.
Pour résoudre le prblème, il est possible de mettre l'attribut dans la balise parente : dangerouslySetInnerHTML={{__html: variable}} (très fortement déconseillé)

Contenu possible dans {} :
- nom d'une variable
- nombre
- undefined ou null (renvoie un élément vide)
- code JSX
- etc

nom des attributs en JSX : pour la majorité en camelCase (ex : background-color devient backgroundColor)

2 manières d'appliquer un style dans une balise :
style={{color: 'red', backgroundColor: 'blue'}}

ou placer {color: 'red', backgroundColor: 'blue'} dans une variable et l'appeler

Déclarations : let, var, const

Événements : attribut onClick={monEvenement}

const monEvenement = (e) =>{
    instructions
}

Attention : onClick est équivalent au addEventListener du JavaScript, mais pas au onclick du HTML (pas de trace dans le code HTML final)

Il est possible d'écrire directement : onClick={(e) => {instructions}} (déconseillé)

Conditions :
true ou false

{condition && contenu} : Si condition est vraie, alors on affiche contenu
{condition ? contenu1 : contenu2}

créer une liste : const liste = ["1", "2", 3]

Afficher une liste dans un ul :
<ul>
    {liste.map(liste => (<li key={liste}>{liste}</li>))}
</ul>

Résultat vidéo 4 15:30 :
Dans App.jsx :
const titre = "Bonjour <b>tout le monde</b>"
const classe = "title"
const style = {color: 'red', backgroundColor: 'blue'}
const liste = ["1", "2", 3]

function App() {

  const monEvenement = (e) =>{
    console.log("Vous avez cliqué sur le titre")
    alert("Bonjour")
  }

  return <>
    <h1 onClick={monEvenement} id="title" className={classe} style={style}>{titre}</h1>
    <input type="text"/>
    <input type="number"></input>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo minus eligendi sint libero obcaecati repellendus iure culpa alias laborum expedita fugiat ipsa neque consequuntur, deserunt asperiores, laudantium optio ex provident.</p>
    <ul>
      {liste.map(liste => (<li key={liste}>{liste}</li>))}
    </ul>
  </>
}

export default App

Suite :
Les fonctions (ou les composants) : Obligatoirement en PascalCase
function MaFonction(){
  return <h1 onClick={monEvenement} id="title" className={classe} style={style}>{titre}</h1>
}

appel : <MaFonction/>

Il est possible de déplacer la fonction dans un autre fichier jsx

Avec paramètres :
function MaFonction({attribut}){
  return <p style={{color: attribut}}>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo minus eligendi sint libero obcaecati repellendus iure culpa alias laborum expedita fugiat ipsa neque consequuntur, deserunt asperiores, laudantium optio ex provident.</p>
}

Appel :
<MaFonction attribut="red"/>
ou
<MaFonction attribut/> si attribut est un booleen (soit true, soit undefined)

Attention : attribut peut être undefined s'il n'est pas appelé avec un paramètre.

Avec paramètres et enfants (peut être récupéré dans la fonction) :
function MaFonction({attribut, children}){
  return <p style={{color: attribut}}>{children}</p>
}

Appel :
<MaFonction attribut="red">contenu</MaFonction>

Autoriser l'ajout d'autres attriubuts (transférer les attributs) :

function MaFonction({attribut, children, cache, ...autresAttributs}){
  if(cache){
    return null
  }

  const spredOperateur = {
    id: 'monid',
    className: 'maclasse'
  }

  return <p style={{color: attribut}} {...spredOperateur} {...autresAttributs}>{children}</p>
}

Appel :
<MaFonction attribut="yellow" onClick={(e) => {alert("OK")}}>Bonjour</MaFonctionEnfant>

Résultat final vidéo 4 :
Dans App.jsx :
const titre = "Bonjour <b>tout le monde</b>"
const classe = "title"
const style = {color: 'red', backgroundColor: 'blue'}
const liste = ["1", "2", 3]

function App() {
  return <>
    <MaFonctionTitre/>
    <input type="text"/>
    <input type="number"></input>
    <MaFonction attribut="red"/>
    <MaFonction attribut="green"/>
    <MaFonction attribut="blue"/>
    <MaFonction/>
    <MaFonctionEnfant attribut="yellow" onClick={(e) => {alert("OK")}}>Bonjour</MaFonctionEnfant>
    <ul>
      {liste.map(liste => (<li key={liste}>{liste}</li>))}
    </ul>
  </>
}

function MaFonctionTitre(){

  const monEvenement = (e) =>{
    console.log("Vous avez cliqué sur le titre")
    alert("Bonjour")
  }

  return <h1 onClick={monEvenement} id="title" className={classe} style={style}>{titre}</h1>
}

function MaFonction({attribut}){
  console.log(attribut)
  return <p style={{color: attribut}}>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo minus eligendi sint libero obcaecati repellendus iure culpa alias laborum expedita fugiat ipsa neque consequuntur, deserunt asperiores, laudantium optio ex provident.</p>
}

function MaFonctionEnfant({attribut, children, cache, ...autresAttributs}){
  if(cache){
    return null
  }

  const spredOperateur = {
    id: 'monid',
    className: 'maclasse'
  }

  return <p style={{color: attribut}} {...spredOperateur} {...autresAttributs}>{children}</p>
}

export default App

Note : Dans main.jsx, le code de base ci-dessous sélectionne la balise où mettre le code ReactJS et appelle la fonction App. La balise <React.StrictMode> sert à afficher des erreurs (utile pour le développement)

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

Prochain cours : Le hook useState